user root;
worker_processes auto;
pid /run/nginx.pid;
error_log /var/log/nginx/error.log;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 768;
	# multi_accept on;
}

http {

	##
	# Basic Settings
	##

	sendfile on;
	tcp_nopush on;
	types_hash_max_size 2048;

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	##
	# Logging Settings
	##

	access_log /var/log/nginx/access.log;

	##
	# Gzip Settings
	##

	gzip on;

	upstream php-sock {
	    server unix:/var/run/php-fpm/php-fpm.sock;
    }

    upstream php-tex-sock {
        server unix:/var/run/php-fpm/php-tex-fpm.sock;
    }

    server {
        listen 80;
        listen [::]:80;

        root   /var/www/i.upmath.me/www;
        access_log  /var/www/i.upmath.me/logs/access.log;
        error_log /var/www/i.upmath.me/logs/error.log error;

        location ~ ^(?s)/(?<ext>svg|png)(?<is_base64>b?)/(?<formula>.*)$ {
            gunzip        on;
            gzip_static   always;
            gzip_vary     on;
            gzip_proxied  expired no-cache no-store private auth;

            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;

            #expires 1d; # enabled on prod

            set $compress_error 0;

            set_by_lua_block $file_path {
                local ext = ngx.var.ext
                local is_base64 = ngx.var.is_base64
                local formula = ngx.var.formula

                if is_base64 == "b" then
                    local base64 = require "ngx.base64"
                    local zlib = require "zlib"

                    local compressed, err = base64.decode_base64url(formula)
                    if not compressed then
                        ngx.log(ngx.ERR, "base64 decode error: ", err)
                        ngx.var.compress_error = 1
                        return ""
                    end

                    local inflator = zlib.inflate(-15)
                    local ok, decoded_formula = pcall(inflator, compressed)
                    if not ok then
                        ngx.log(ngx.ERR, "deflate decompress error: ", decoded_formula)
                        ngx.var.compress_error = 1
                        return ""
                    end

                    formula = decoded_formula
                end

                formula = formula:gsub("^%s*(.-)%s*$", "%1")

                local md5 = ngx.md5(formula)
                return md5:sub(1, 2) .. "/" .. md5:sub(3, 4) .. "/" .. md5:sub(5) .. "." .. ext
            }

            if ($compress_error) {
                return 400;
            }

            if (-f $document_root/_error/$file_path) {
                return 400;
            }

            rewrite ^ /_cache/$file_path break;
            error_page 404 = @s2_latex_renderer;
            log_not_found off;
        }

        location /latex.js {
            gzip_static   on;
            gzip_vary     on;
            gzip_proxied  expired no-cache no-store private auth;

            # expires 1d; # enabled on prod
        }

        location /css {
            gzip_static   on;
            gzip_vary     on;
            gzip_proxied  expired no-cache no-store private auth;

            # expires 1d; # enabled on prod
        }

        location /i/ {
            # expires 1d; # enabled on prod
        }

        location /js {
            gzip_static   on;
            gzip_vary     on;
            gzip_proxied  expired no-cache no-store private auth;

            # expires 1d;
        }

        location / {
            index           index.html index.php;
        }

        location /g/ {
            try_files       $uri $uri/ /index.php;
        }

        location /gb/ {
            try_files       $uri $uri/ /index.php;
        }

        location ~ \.php$ {
            try_files       $uri =404;
            include	        /etc/nginx/fastcgi.conf;
            fastcgi_pass    php-sock;
        }

        location @s2_latex_renderer {
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, OPTIONS' always;

            include	        /etc/nginx/fastcgi.conf;
            fastcgi_pass    php-tex-sock;
            fastcgi_param   SCRIPT_FILENAME $document_root/render.php;
            fastcgi_param   SCRIPT_NAME /render.php;

            # enabled on prod
            #fastcgi_cache i_upmath;
            #fastcgi_cache_valid 200 10m;
            #fastcgi_cache_methods GET HEAD;
            #fastcgi_cache_lock on;
            #fastcgi_cache_lock_age 9s;
            #fastcgi_cache_lock_timeout 9s;

            fastcgi_buffers 8 16k;
            fastcgi_buffer_size 32k;
            fastcgi_connect_timeout 90;
            fastcgi_send_timeout 90;
            fastcgi_read_timeout 300;
        }
    }
}
